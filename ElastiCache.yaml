AWSTemplateFormatVersion: 2010-09-09
Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.30.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: GuruChallenge
  mySubnetA:
    Type: AWS::EC2::Subnet
    DependsOn:
      - myVPC
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 172.30.1.0/24
      AvailabilityZone: "us-east-1a"
      Tags:
      - Key: Name
        Value: GuruChallenge
  mySubnetB:
    Type: AWS::EC2::Subnet
    DependsOn:
      - myVPC
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 172.30.2.0/24
      AvailabilityZone: "us-east-1b"
      Tags:
      - Key: Name
        Value: GuruChallenge
  myDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    DependsOn:
      - mySubnetA
      - mySubnetB
    Properties: 
      DBSubnetGroupDescription: PostgreSQL SG
      SubnetIds: 
        - !Ref mySubnetA
        - !Ref mySubnetB
      Tags: 
        - 
          Key: Name
          Value: GuruChallenge
  EC2SG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: 
      - myVPC
    Properties: 
      GroupDescription: EC2 SG
      GroupName: GuruChallenge SG
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: TCP
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: EC2 SG
      VpcId: !Ref myVPC
  myNACL:
    Type: AWS::EC2::NetworkAcl
    DependsOn:
      - myVPC
      - mySubnetA
      - mySubnetB
    Properties:
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: NACL for GuruChallenge
  myInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn:
      - myNACL
    Properties:
      NetworkAclId:
        Ref: myNACL
      RuleNumber: 100
      Protocol: -1
      Egress: false
      RuleAction: Allow
      CidrBlock: 0.0.0.0/0 
  myOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn:
      - myNACL
    Properties:
      NetworkAclId:
        Ref: myNACL
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: Allow
      CidrBlock: 0.0.0.0/0
  myIG:
    Type: AWS::EC2::InternetGateway
    DependsOn:
      - myVPC
    Properties:
      Tags:
        - Key: Name
          Value: IG for GuruChallenge
  attachIG:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - myIG
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myIG
  myRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - myIG
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
        - Key: Name
          Value: RouteTable for GuruChallenge
  myRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - myRouteTable
    Properties:
      RouteTableId:
        Ref: myRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: myIG
  mySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - myRouteTable
      - mySubnetA
    Properties:
      SubnetId:
        Ref: mySubnetA
      RouteTableId:
        Ref: myRouteTable
  DBSG:
    Type: AWS::RDS::DBSecurityGroup
    DependsOn:
      - EC2SG
    Properties: 
      DBSecurityGroupIngress:
        - EC2SecurityGroupId: !Ref EC2SG
      EC2VpcId: !Ref myVPC
      GroupDescription: Ingress from Amazon EC2 security group
      Tags: 
        - Key: Name
          Value: DB SG
  myPostgeSQLInstance:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - DBSG
      - myDBSubnetGroup
    Properties: 
      AllocatedStorage: 20
      StorageType: gp2
      DBInstanceClass: db.t2.micro
      Engine: "Postgres"
      EngineVersion: 12.5
      MasterUsername: !Ref DBAccount
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref myDBSubnetGroup
      DBName: !Ref DBName
      DBSecurityGroups:
        - !Ref DBSG
      Tags:
        - Key: Name
          Value: GuruChallenge
  EC2:
    Type: AWS::EC2::Instance
    DependsOn:
    - EC2SG
    - myIG
    - myRoute
    - myPostgeSQLInstance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0ab4d1e9cf9a1215a
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet:
          - !Ref EC2SG
        SubnetId: 
          Ref: mySubnetA
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo yum -y update
            sudo yum -y upgrade

            sudo amazon-linux-extras install -y epel
            sudo amazon-linux-extras install -y postgresql11
            sudo amazon-linux-extras install -y nginx1
            sudo amazon-linux-extras install -y python3.8
            sudo amazon-linux-extras install -y redis6

            sudo yum -y install gcc
            sudo yum -y install git
            sudo yum install -y postgresql-devel
            sudo yum install -y python3-devel
            sudo yum install -y python3-pip
            sudo yum install -y python3-setuptools

            sudo git clone https://github.com/ACloudGuru/elastic-cache-challenge.git home/app
            sudo chmod -R 755 /home/app
            sudo chown -R ec2-user:nginx /home/app

            PGPASSWORD=${DBPassword} psql -h ${myPostgeSQLInstance.Endpoint.Address} -U ${DBAccount} -f /home/app/install.sql ${DBName}

            sudo echo [postgresql] > /home/app/config/database.ini
            sudo echo user=${DBAccount} >> /home/app/config/database.ini
            sudo echo password=${DBPassword} >> /home/app/config/database.ini
            sudo echo database=${DBName} >> /home/app/config/database.ini
            sudo echo host=${myPostgeSQLInstance.Endpoint.Address} >> /home/app/config/database.ini
            sudo echo "" >> /home/app/config/database.ini

            sudo echo "server {" > /etc/nginx/conf.d/nginx-app.conf
            sudo echo " listen     80;" >> /etc/nginx/conf.d/nginx-app.conf
            sudo echo " location /app {" >> /etc/nginx/conf.d/nginx-app.conf
            sudo echo "   proxy_pass         http://127.0.0.1:5000/;" >> /etc/nginx/conf.d/nginx-app.conf
            sudo echo "   proxy_redirect     off;" >> /etc/nginx/conf.d/nginx-app.conf
            sudo echo "   proxy_set_header   Host                 \$host;" >> /etc/nginx/conf.d/nginx-app.conf
            sudo echo "   proxy_set_header   X-Real-IP            \$remote_addr;" >> /etc/nginx/conf.d/nginx-app.conf
            sudo echo "   proxy_set_header   X-Forwarded-For      \$proxy_add_x_forwarded_for;" >> /etc/nginx/conf.d/nginx-app.conf
            sudo echo "   proxy_set_header   X-Forwarded-Proto    \$scheme;" >> /etc/nginx/conf.d/nginx-app.conf
            sudo echo "   }" >> /etc/nginx/conf.d/nginx-app.conf
            sudo echo "}" >> /etc/nginx/conf.d/nginx-app.conf
            sudo echo "" >> /etc/nginx/conf.d/nginx-app.conf

            cd /home/app
            python3 -m venv /home/app
            source /home/app/bin/activate
            sudo pip3 install psycopg2 configparser flask

            sudo systemctl start nginx
            sudo systemctl enable nginx
Parameters:
  DBAccount:
    Description: "DB Admin account"
    Type: String
    Default: cloudguru
    MinLength: 5
    MaxLength: 41
    AllowedPattern: ^[a-zA-Z0-9]*$
  DBPassword:
    Description: "Admin Password"
    Type: String
    Default: password
    MinLength: 8
    MaxLength: 41
    AllowedPattern: ^[a-zA-Z0-9]*$
  DBName:
    Description: "DBName"
    Type: String
    Default: myPostgresDB
    MinLength: 8
    MaxLength: 41
    AllowedPattern: ^[a-zA-Z0-9]*$
Outputs:
  GetChallengeVPC:
    Description: "VPC Name"
    Value: !Ref myVPC
  GetEC2SG:
    Description: 'EC 2 SG'
    Value: !Ref EC2SG
  GetRDSHostname:
    Description: "RDS Hostname"
    Value: !GetAtt myPostgeSQLInstance.Endpoint.Address
  PublicIP:
    Description: "PublicIP"
    Value: !Join ['', [!GetAtt EC2.PublicIp,/app]]